<?php

/**
 * Implements hook_menu().
 */
function awssqs_menu() {
  $items['sqs/api'] = array(
    //PUT GET POST DELETE
    'page callback' => 'sqsapi',
    // 'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['admin/aws/settings'] = array(
    'title' => 'AWS',
    'description' => 'Find and manage content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('awssqs_settings_form'),
    'access arguments' => array('access content overview'),
    'weight' => -10,
  );

  $items['sqs/test'] = array(
    //PUT GET POST DELETE
    'page callback' => 'test',
    // 'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['sqs/reader'] = array(
    //PUT GET POST DELETE
    'page callback' => 'sqs_reader',
    // 'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

function test() {

  $event_data = drupal_json_encode( array(
   'category'        => 'dev_test_category',
   'action'          => 'dev_test_action',
   'label'           => 'dev_test_label',
  ));
  // CURL-less method with PHP5:
  $data = array('data' => $event_data, 'type' => 'ga_push_add_event');
  global $base_url;
  $url = $base_url.'/sqs/api';
  //open connection
  $ch = curl_init();

  //set the url, number of POST vars, POST data
  curl_setopt($ch,CURLOPT_URL, $url);
  curl_setopt($ch,CURLOPT_POST, 2);
  curl_setopt($ch,CURLOPT_POSTFIELDS, http_build_query($data));

  //execute post
  $result = curl_exec($ch);

  //close connection
  curl_close($ch);
  // return 'POST data '.($result?'success!':'faild!');
  $array = array('faild');
  if($result)  $array = array('success');
  header('Content-Type: application/json');
  print drupal_json_encode($array);
  drupal_exit();
}

function sqsapi() {
  if(isset($_POST)){
    // watchdog('post', '<pre>'.print_r($_POST,1));
    require 'aws.phar';
    // Use the us-west-2 region and latest version of each client.
    $sharedConfig = [
        'region'  => 'ap-southeast-1',
        'version' => 'latest',
        'credentials' => array(
          'key'    => variable_get('aws_key', ""),
          'secret' => variable_get('aws_secret', ""),
        ),
    ];
    // Create an SDK class used to share configuration across clients.
    $sdk = new Aws\Sdk($sharedConfig);
    // Create an Amazon S3 client using the shared configuration data.
    $SqsClient = $sdk->createSqs();
    // $QueueUrl = $SqsClient->getQueueUrl(array('QueueName'=>'our_queue'))['QueueUrl'];
    $queue_name = 'our_queue';
    $QueueUrl = 'https://sqs.ap-southeast-1.amazonaws.com/740669826614/'.$queue_name;
    // dpm($QueueUrl);
    $MessageBody = $_POST['data'];//'sqs post at'.date('Ymd H:i:s');
    $message = array(
      // 'DelaySeconds' => <integer>, //Delay delivery of this message by 0
      'MessageAttributes' => [
          'type' => [
              'DataType' => 'String', // REQUIRED String, Number, and Binary.
              'StringValue' => $_POST['type'],
          ],
      ],
      'MessageBody' => $MessageBody, // REQUIRED
      'QueueUrl' => $QueueUrl, // REQUIRED
    );
    $result = $SqsClient->sendMessage($message);
  }
  return 1;
}



function sqs_reader(){
  require 'aws.phar';
  // Use the us-west-2 region and latest version of each client.
  $sharedConfig = [
      'region'  => 'ap-southeast-1',
      'version' => 'latest',
      'credentials' => array(
        'key'    => variable_get('aws_key', ""),
        'secret' => variable_get('aws_secret', ""),
      ),
  ];

  // Create an SDK class used to share configuration across clients.
  $sdk = new Aws\Sdk($sharedConfig);

  // Create an Amazon S3 client using the shared configuration data.

  $SqsClient = $sdk->createSqs();
  // $QueueUrl = $SqsClient->getQueueUrl(array('QueueName'=>'our_queue'))['QueueUrl'];
  $queue_name = 'our_queue';
  $QueueUrl = 'https://sqs.ap-southeast-1.amazonaws.com/740669826614/'.$queue_name;


  $result = $SqsClient->receiveMessage([
    // 'AttributeNames' => ['type'],
    'MaxNumberOfMessages' => 10,// Values can be from 1 to 10. Default is 1.
    'MessageAttributeNames' => ['type'],
    'QueueUrl' => $QueueUrl, // REQUIRED
    // 'VisibilityTimeout' => <integer>,
    // 'WaitTimeSeconds' => <integer>,
  ]);
  $return = 0;//no message to process
  // $process = 0;//no message to process
  $Messages = $result->toArray();
  // dpm($Messages);
  if(isset($Messages['Messages']))
  foreach ($Messages['Messages'] as $key => $Message) {
    $MessageBody = $Message['Body'];
    $function = $Message['MessageAttributes']['type']['StringValue'];
    $parements = drupal_json_decode($MessageBody);
    if(function_exists($function)) {
      // dpm($function);
      $function($parements);
      // dpm($parements);
      $return++;
    }
    $result = $SqsClient->deleteMessage([
      'QueueUrl' => $QueueUrl, // REQUIRED
      'ReceiptHandle' => $Message['ReceiptHandle'], // REQUIRED
    ]);
    // $process++;//delete how many
    // dpm($result->toArray());
  }
  // return '';
  header('Content-Type: application/json');
  print '["'.$return.'"]';
  drupal_exit();
}


/**
 * wechat setting form
 */
function awssqs_settings_form(){
  global $user;
  $form['config'] = array(
    '#type' => 'fieldset',
    '#title' => '接入信息',
    '#collapsible' => TRUE,
    '#collapsed' => false,
  );
  $form['config']['aws_key'] = array(
    '#type' => 'textfield',
    '#title' => 'key',
    '#description' => '',
    '#default_value' => variable_get('aws_key', ""),
    '#required' => true,
  );
  $form['config']['aws_secret'] = array(
    '#type' => 'textfield',
    '#title' => 'secret',
    '#description' => '',
    // '#default_value' => variable_get('aws_secret', ""),
    '#required' => true,
  );
  $form['config']['submit_config'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}
function awssqs_settings_form_submit($form, &$form_state){
  variable_set('aws_key', $form_state['values']['aws_key']);
  variable_set('aws_secret', $form_state['values']['aws_secret']);
}
