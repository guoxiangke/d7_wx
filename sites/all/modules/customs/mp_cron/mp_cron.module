<?php
/**
 * Implements hook_cron().
 *  every 15 mins
 */
function mp_cron_cron() {
  module_load_include('php', 'mp_liangyou', 'liangyou_audio_list');
  $radios = liangyou_audio_list2();
  //20160330.json
  $file_path = DRUPAL_ROOT.'/sites/default/files/cron/txly2/';
  if (!is_dir($file_path)) {
    mkdir($file_path, 0777, true);
  }
  $file_key = drupal_realpath('public://cron/txly2/'.date('Ymd').'.json') ;
  if(!file_exists($file_key))  {
    foreach ($radios as $code => $radio) {
      $title = $radio['title'];
      $url = 'http://txly2.net/'.$code;
      $html = file_get_html($url);
      if(!$html) {
        watchdog('mp_liangyou', 'lost audio:'.$title, array(), WATCHDOG_NOTICE, 'error');
        continue;
      }
      if(!isset($html->find('.ss-title p', 0)->plaintext)) continue;
      $mp3_description = $html->find('.ss-title p', 0)->plaintext;
      $title_get = $html->find('.ss-title a', 1)->plaintext;
      $dates = explode('-', $title_get);
      $date = '';
      if(isset($dates[1])) $date = $dates[1];
      if($date) save_lymeta($code,$mp3_description,(int)$date);
      $data[] = array(
        'code'  => $code,
        'index'  => $radio['index'],
        'title' => $title,
        'date' => $date,
        'desc'  => $mp3_description,
        );
      // break;
    }
    $file = json_encode($data);
    if(!is_null($file)){
      file_put_contents( $file_key , $file );
      watchdog('mp_liangyou', 'Success download ly audio list from txly2', array(), WATCHDOG_NOTICE, 'link');
    }
  }
  // each code.json
  foreach ($radios as $code => $radio) {
    $file_key = drupal_realpath('public://cron/txly2/'.$code.'.json');
    if(!file_exists($file_key))  {
      $url = 'http://txly2.net/'.$code;
      // $url = 'http://txly2.net/sg';
      $html = file_get_html($url);
      if(!$html) {
        watchdog('mp_cron', '!file_get_html:'.$code, array(), WATCHDOG_NOTICE, 'error');
        continue;
      }
      if(!isset($html->find('.ss-title p', 0)->plaintext)) continue;
      $mp3_description = $html->find('.ss-title p', 0)->plaintext;
      $title_get = $html->find('.ss-title a', 1)->plaintext;
      $dates = explode('-', $title_get);
      $data[$dates[1]] = $mp3_description;
      $file = json_encode($data);
      file_put_contents( $file_key , $file );
    }else{
      $data = json_decode(file_get_contents($file_key),true);
      if(isset($data[date('Ymd')])) continue; //20160330
      $url = 'http://txly2.net/'.$code;
      $html = file_get_html($url);
      if(!$html) {
        watchdog('mp_cron', '!file_get_html:'.$code, array(), WATCHDOG_NOTICE, 'error');
        continue;
      }
      if(!isset($html->find('.ss-title p', 0)->plaintext)) continue;
      $mp3_description = $html->find('.ss-title p', 0)->plaintext;
      $title_get = $html->find('.ss-title a', 1)->plaintext;
      $dates = explode('-', $title_get);
      if(isset($dates[1])){
        $data[$dates[1]] = $mp3_description;
        $file = json_encode($data);
        file_put_contents( $file_key , $file );
      }
      continue;
    }
  }
  // AUTO
  // _get_need_publish_nodes();//only update when node update!!!+twice a day!
  _publish_mpnews();
  //auto creat mpuser!
  $nodes = get_need_create_mpaccountnode();
  _mpusers_create($nodes);
  if(in_array(date('G'), array(0,10,21)) && date('i')<10){
    cache_clear_all('*', 'cache', TRUE);
    // watchdog('mp_cron', 'cache_clear_all for liangyou wx audio', array(), WATCHDOG_NOTICE, 'link');
  }
}
/**
 * Implements hook_menu().
 */
function mp_cron_menu() {
  $items = array();
  $items['mpcron/update'] = array(
    'title' => '',
    'page callback' => 'create_mp_cron_nodes',
    'type' => MENU_CALLBACK,
    'access callback' => '_user_has_role',
    'access arguments' => array(array('公众平台运营者','administrator')),
    'type' => MENU_CALLBACK,
  );
  //1 * * * * wget -O - http://wx.yongbuzhixi.com/mpcron/needsent >/dev/null 2>&1
  //每小时执行一次
  $items['mpcron/needsent'] = array(//cron every hour!
    'title' => '',//only update when node update!!!+twice a day!
    'page callback' => '_get_need_publish_nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['mpcron/publish_mpnews'] = array(//cron run every 5 mins
    'title' => '',
    'page callback' => '_publish_mpnews',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}
/**
 * Implements hook_menu_alter().
 * 只有认证用户才可以使用自动发送
 */
function mp_cron_menu_alter(&$items) {
  $items['mp-cron']['access callback'] = '_user_user_autosend_certified';
}
function _user_user_autosend_certified(){
  global $user;
  return variable_get('mp_config_certified_'.$user->uid, "")?TRUE:FALSE;
}

function _user_has_role($roles = array()) {
  global $user;
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * called by use click!.
 * @return [type] [description]
 */
function create_mp_cron_nodes(){
  //get all 认证的账户
  global $user;
  $count =0;
  $account = $user;
  $weObj= _mp_service_init_wechat($account);
  $medias = $weObj->getForeverList('news',0,20);
  if(!count($medias['item'])) {
    drupal_set_message('没有可用更新图文', 'warning', FALSE);
    drupal_goto('mp-cron');
  }
  $exist_media_objs = db_query('SELECT field_media_id_value as id FROM {field_data_field_media_id} order by revision_id desc LIMIT 0,200')->fetchAll();
  // dpm($exist_media_ids);
  $exist_media_ids = array();
  foreach ($exist_media_objs as $obj) {
    $exist_media_ids[] = $obj->id;
  }
  $items = $medias['item'];//array_reverse();
  foreach ($items as $media) {
    $node = new stdClass();
    $node->type = 'mp_cron';
    node_object_prepare($node);
    $node->uid = $account->uid;
    $node = $node;
    $node->field_media_id[LANGUAGE_NONE][0]['value']  =  $media['media_id'];
    if(in_array($media['media_id'], $exist_media_ids)){
      // watchdog('mp_cron', 'exsits', array(), WATCHDOG_NOTICE, 'link');
      continue;
    }
    foreach ($media['content']['news_item'] as $key => $item) {
      $node->field_title[LANGUAGE_NONE][]= array('value'=>$item['title']);
      $node->field_redirect_link[LANGUAGE_NONE][]= array('value'=>$item['url']);
      $node->field_link[LANGUAGE_NONE][]= array('value'=>$item['thumb_url']);//image
    }
    $node->field_date[LANGUAGE_NONE][0]['value'] = time()-3600;
    $node->title = $node->field_title[LANGUAGE_NONE][0]['value'];
    node_save($node);
    $count++;
    $node_link = l(t('view'), 'node/' . $node->nid);
    // $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
    // watchdog('mp_cron', '图文更新 @type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);

  }
  if($count){
    drupal_set_message('本次更新了'.$count.'个图文。', 'status', FALSE);
  }else{
    drupal_set_message('没有可用更新,如果没有新添加的图文，请稍后再试!', 'warning', FALSE);
  }
  drupal_goto('mp-cron');
}
/**
 * //only update when node update!!!+twice a day!
 * 0 0 0/12 * * ? mpcron/needsent
 * @return [type] [description]
 */
function  _get_need_publish_nodes(){ //>now time
  $nodes = db_query("SELECT node.nid AS nid, node.uid AS uid, field_data_field_date.field_date_value AS plan_time, node.status AS node_status, node.created AS node_created
      FROM
      {node} node
      LEFT JOIN {field_data_field_date} field_data_field_date ON node.nid = field_data_field_date.entity_id AND (field_data_field_date.entity_type = 'node' AND field_data_field_date.deleted = '0')
      WHERE (( (node.type IN  ('mp_cron')) AND (node.status=1) AND (field_data_field_date.field_date_value >=".time().") ))
      ORDER BY plan_time ASC
      LIMIT 50 OFFSET 0")->fetchAll();
  // dpm($nodes);
  // dpm(variable_get('mp_cron_publish_8'));
  // $times = variable_get('mp_cron_publish_plan', array());
  // $uids = variable_get('mp_cron_publish_uids', array());
  // dpm($times);
  // dpm($uids);
  $uids = array();
  $times = array();
  foreach ($nodes as $key => $node) {
    if(in_array($node->uid, $uids)) continue;//每个uid每天只发一个
    // variable_delete('mp_cron_publish_'.$node->uid);//debug!
    // if($node->nid==variable_get('mp_cron_publish_'.$node->uid,0)) continue; //如果已经存在
    variable_set('mp_cron_publish_'.$node->uid, $node->nid);
    $uids[]=$node->uid;
    $time = $node->plan_time;//strtotime(.' UTC+8');//0000-04-12 11:45:00 UTC+8 =>1460634300
    $times[] = $time;
    $node_link = l(t('view'), 'node/' . $node->nid);
    $watchdog_args = array('%time' => date('m/d H:i',$node->plan_time), '@nid' => $node->nid, '@uid' => $node->uid);
    // watchdog('autosendmpnews', '%time set var user: @uid of nid: @nid', $watchdog_args, WATCHDOG_NOTICE, $node_link);
  }
  if($uids) variable_set('mp_cron_publish_uids', $uids);
  if($times) variable_set('mp_cron_publish_plan', $times);
  return ;
  header('Content-type: application/json');
  print '[{"end":"get_need_publish_this_hour_nodes called"}]';
}

function  _publish_mpnews(){
  $plans = variable_get('mp_cron_publish_plan', array());
  $uids = variable_get('mp_cron_publish_uids', array());
  if(count($plans))
  foreach ($plans as $time) {
    $now = time();
    if($time < $now-900 || $time < $now+900){//上下15分钟内check
      if(count($uids))
      foreach ($uids as $uid) {
        $nid = variable_get('mp_cron_publish_'.$uid, '0');
        if(!$nid) continue;
        //get node to published! date!time!!
        $node = node_load($nid);
        $media_id = $node->field_media_id[LANGUAGE_NONE][0]['value'];
        $account = new stdClass();
        $account->uid = $node->uid;
        $weObj = _mp_service_init_wechat($account);
        //if 没有认证 TODO
        //if 今天已经发过了！
        {
          $sendall = array(
            'filter' => array(
              'is_to_all' => true,
              // 'group_id'  => 2,
            ),
            'mpnews' => array('media_id'=>$media_id),
            'msgtype' => "mpnews",// mpnews | voice | image | mpvideo => array( "media_id"=>"MediaId")
          );
          $return = $weObj->sendGroupMassMessage($sendall);
          // $return = $weObj->sendGroupMassMessage($sendall);
          if($return){
            $node_link = l(t('view'), 'node/' . $node->nid);
            $watchdog_args = array('@type' => $node->name, '%title' => $node->title);
            watchdog('autosendmpnews', '@type: %title sent sucess.', $watchdog_args, WATCHDOG_NOTICE, $node_link);

            $node->status = 0;
            node_save($node);
            variable_delete('mp_cron_publish_'.$node->uid);
            if(($key = array_search($uid, $uids)) !== false) {
              unset($uids[$key]);
              variable_set('mp_cron_publish_uids', $uids);
            }
            if(($key = array_search($time, $plans)) !== false) {
              unset($plans[$key]);
              variable_set('mp_cron_publish_plan', $plans);
            }
          }
        }
      }
    }
  }
  header('Content-type: application/json');
  print '[{"end":"clean"}]';
}


function get_need_create_mpaccountnode(){
  return db_query("SELECT  node.nid AS nid, node.created AS node_created, 'node' AS field_data_field_mp3url_node_entity_type FROM {node} node
    LEFT JOIN {field_data_field_user_ref} field_data_field_user_ref ON node.nid = field_data_field_user_ref.entity_id AND (field_data_field_user_ref.entity_type = 'node' AND field_data_field_user_ref.deleted = '0')
    WHERE (( (node.status = '1') AND (node.type IN  ('mpwechat')) AND (field_data_field_user_ref.field_user_ref_target_id IS NULL ) ))
    LIMIT 10 OFFSET 0")->fetchAll();
}


function _mpusers_create($nodes){
  foreach ($nodes as $node) {
    $node = node_load($node->nid);
    if(!isset($node->field_user_name[LANGUAGE_NONE][0]['value'])) continue;
    $name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    $ori_user_name = $name;
    $count = 0;
    while(user_load_by_name($name)){
      $user_name = $ori_user_name.'_'.$count;
      $count ++;
    }
    $mail = $name.'@wx.com';
    $new_user = array(
        'name' => $name,
        'pass' => user_password(),
        'mail' => $mail,
        'init' => $mail,
        // 'picture'=> $file->fid,
        'status' => 1,
        // 'data'  => $user_info,
        'roles' => array(
          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
          7 => 'author',
        ),
        'field_user_name' => array(LANGUAGE_NONE => array(array('value' => $node->title))),
        'field_node_ref' => array(LANGUAGE_NONE => array(array('target_id' => $node->nid))),
      );

    $response = drupal_http_request($node->field_link[LANGUAGE_NONE][0]['value']);
    // watchdog('pic_url', $hd_head_img, array(), WATCHDOG_NOTICE, 'link');
    if ($response->code == 200){
      $file = file_save_data($response->data, 'public://users/'.$name.'.jpg');
    }
    if(isset($file->fid)) $new_user['picture'] = $file->fid;
    $account = user_save(null, $new_user);
    if(!$account){
      watchdog('mp_cron_mpuser', '账户创建失败！', array(), WATCHDOG_NOTICE, 'error');
    }
    $node->uid = $account->uid;
    $node->field_user_ref[LANGUAGE_NONE][0]['target_id'] = $account->uid;
    node_save($node);
  }
}
/**
 * Implements hook_node_update().
 */
function mp_cron_node_update($node) {
  if($node->type =='mp_cron'){
    _get_need_publish_nodes();//only update when node update!!!+twice a day!
    // watchdog('nodeupdate', 'called _get_need_publish_nodes', array(), WATCHDOG_NOTICE, 'link');
  }
}
