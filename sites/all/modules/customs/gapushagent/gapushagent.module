<?php
/**
 * Client call this funciton.
 * @param  [type] $type      [description]
 * @param  [type] $push_data [description]
 * @return [type]            [description]
 */
function gapushagent($type,$push_data){
  //if server call. then use default funciton. no sqs round.
  $pos = strpos($_SERVER['HTTP_HOST'], 'staging');
  if($pos != FALSE){
    switch ($type) {
      case 'event':
        ga_push_add_event($push_data);
        break;
      case 'pageview':
        ga_push_add_pageview($push_data);
        break;
      default:
        # code...
        break;
    }
    return;
  }
  // POST data
    // ga_push_add_event($push_data);
    $data = array('data' => drupal_json_encode($push_data), 'type' => 'ga_push_add_event');
    // Server API url
    $url = 'http://wxstaging.yongbuzhixi.com/sqs/api';
    //open connection
    $ch = curl_init();

    //set the url, number of POST vars, POST data
    curl_setopt($ch,CURLOPT_URL, $url);
    curl_setopt($ch,CURLOPT_POST, 2);
    curl_setopt($ch,CURLOPT_POSTFIELDS, http_build_query($data));
    curl_setopt($ch, CURLOPT_TIMEOUT, 6); //timeout in seconds

    //execute post http://thisinterestsme.com/php-error-handling-curl/
    $result = curl_exec($ch);
    if(curl_errno($ch)){
      watchdog('gapushagent', 'Exception:'.curl_error($ch), array(), WATCHDOG_NOTICE, 'link');
    }

    //close connection
    curl_close($ch);
    return;
    // header('Content-Type: application/json');
    // print drupal_json_encode($array);
    // drupal_exit();
  // $data = drupal_json_encode($data);
  // $push_data = 'type='.$type.'&data='.$data;
  // $url = 'http://wxstaging.yongbuzhixi.com/gapushagent';
  // $options = array(
  //   'method' => 'POST',
  //   'data' => $push_data,
  //   'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  // );
  // drupal_http_request($url, $options);
  // // $result =
  // // dpm($result);
}
function cache_get_like($cidprex, $bin = 'cache') {
  return _cache_get_object($bin)->getlike($cidprex);
  // /**
  //  * Add blow to your cache.inc file!
  //  * Implements DrupalCacheInterface::getMultiple().
  //  */
  // function getlike(&$cid) {
  //   try {
  //     // Garbage collection necessary when enforcing a minimum cache lifetime.
  //     $this->garbageCollection($this->bin);

  //     // When serving cached pages, the overhead of using db_select() was found
  //     // to add around 30% overhead to the request. Since $this->bin is a
  //     // variable, this means the call to db_query() here uses a concatenated
  //     // string. This is highly discouraged under any other circumstances, and
  //     // is used here only due to the performance overhead we would incur
  //     // otherwise. When serving an uncached page, the overhead of using
  //     // db_select() is a much smaller proportion of the request.
  //     $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid like ":cid%" (:cids)', array(':cid' => $cid));
  //     $cache = array();
  //     foreach ($result as $item) {
  //       $item = $this->prepareItem($item);
  //       if ($item) {
  //         $cache[$item->cid] = $item;
  //       }
  //     }
  //     $cids = array_diff($cids, array_keys($cache));
  //     return $cache;
  //   }
  //   catch (Exception $e) {
  //     // If the database is never going to be available, cache requests should
  //     // return FALSE in order to allow exception handling to occur.
  //     return array();
  //   }
  // }
}

