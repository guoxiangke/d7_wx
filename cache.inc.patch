diff --git a/includes/cache.inc b/includes/cache.inc
index 4c2bed3..5ba2a9d 100644
--- a/includes/cache.inc
+++ b/includes/cache.inc
@@ -5,6 +5,41 @@
  * Functions and interfaces for cache handling.
  */
 
+  /**
+   * Add blow to your cache.inc file! daledale
+   * Implements DrupalCacheInterface::getMultiple().
+   */
+  function getlike(&$prefix) {
+    try {
+      // Garbage collection necessary when enforcing a minimum cache lifetime.
+      $this->garbageCollection($this->bin);
+
+      // When serving cached pages, the overhead of using db_select() was found
+      // to add around 30% overhead to the request. Since $this->bin is a
+      // variable, this means the call to db_query() here uses a concatenated
+      // string. This is highly discouraged under any other circumstances, and
+      // is used here only due to the performance overhead we would incur
+      // otherwise. When serving an uncached page, the overhead of using
+      // db_select() is a much smaller proportion of the request.
+      $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid like :pattern',
+        array(':pattern' => db_like($prefix) . '%')
+      );
+      $cache = array();
+      foreach ($result as $item) {
+        $item = $this->prepareItem($item);
+        if ($item) {
+          $cache[$item->cid] = $item;
+        }
+      }
+      $prefix = array_diff(array($prefix), array_keys($cache));
+      return $cache;
+    }
+    catch (Exception $e) {
+      // If the database is never going to be available, cache requests should
+      // return FALSE in order to allow exception handling to occur.
+      return array();
+    }
+  }
 /**
  * Gets the cache object for a cache bin.
  *
